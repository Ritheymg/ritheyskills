{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12039299,"sourceType":"datasetVersion","datasetId":7575797},{"sourceId":422605,"sourceType":"modelInstanceVersion","isSourceIdPinned":false,"modelInstanceId":344381,"modelId":365657}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.293412Z","iopub.execute_input":"2025-06-04T17:24:15.293774Z","iopub.status.idle":"2025-06-04T17:24:15.303090Z","shell.execute_reply.started":"2025-06-04T17:24:15.293752Z","shell.execute_reply":"2025-06-04T17:24:15.301820Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/carscsv/Cars.csv\n","output_type":"stream"}],"execution_count":91},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.304649Z","iopub.execute_input":"2025-06-04T17:24:15.305044Z","iopub.status.idle":"2025-06-04T17:24:15.324665Z","shell.execute_reply.started":"2025-06-04T17:24:15.305016Z","shell.execute_reply":"2025-06-04T17:24:15.323394Z"}},"outputs":[],"execution_count":92},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/carscsv/Cars.csv')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.326307Z","iopub.execute_input":"2025-06-04T17:24:15.326607Z","iopub.status.idle":"2025-06-04T17:24:15.347549Z","shell.execute_reply.started":"2025-06-04T17:24:15.326578Z","shell.execute_reply":"2025-06-04T17:24:15.346594Z"}},"outputs":[],"execution_count":93},{"cell_type":"code","source":"print(df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.348495Z","iopub.execute_input":"2025-06-04T17:24:15.348786Z","iopub.status.idle":"2025-06-04T17:24:15.364237Z","shell.execute_reply.started":"2025-06-04T17:24:15.348761Z","shell.execute_reply":"2025-06-04T17:24:15.363207Z"}},"outputs":[{"name":"stdout","text":"(398, 9)\n","output_type":"stream"}],"execution_count":94},{"cell_type":"code","source":"print(df.columns.values)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.366006Z","iopub.execute_input":"2025-06-04T17:24:15.366361Z","iopub.status.idle":"2025-06-04T17:24:15.383319Z","shell.execute_reply.started":"2025-06-04T17:24:15.366335Z","shell.execute_reply":"2025-06-04T17:24:15.382055Z"}},"outputs":[{"name":"stdout","text":"['mpg' 'cylinders' 'displacement' 'horsepower' 'weight' 'acceleration'\n 'model_year' 'origin' 'name']\n","output_type":"stream"}],"execution_count":95},{"cell_type":"code","source":"df.set_index('name')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.385205Z","iopub.execute_input":"2025-06-04T17:24:15.385559Z","iopub.status.idle":"2025-06-04T17:24:15.412428Z","shell.execute_reply.started":"2025-06-04T17:24:15.385527Z","shell.execute_reply":"2025-06-04T17:24:15.411446Z"}},"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"                            mpg  cylinders  displacement  horsepower  weight  \\\nname                                                                           \nchevrolet chevelle malibu  18.0          8         307.0       130.0    3504   \nbuick skylark 320          15.0          8         350.0       165.0    3693   \nplymouth satellite         18.0          8         318.0       150.0    3436   \namc rebel sst              16.0          8         304.0       150.0    3433   \nford torino                17.0          8         302.0       140.0    3449   \n...                         ...        ...           ...         ...     ...   \nford mustang gl            27.0          4         140.0        86.0    2790   \nvw pickup                  44.0          4          97.0        52.0    2130   \ndodge rampage              32.0          4         135.0        84.0    2295   \nford ranger                28.0          4         120.0        79.0    2625   \nchevy s-10                 31.0          4         119.0        82.0    2720   \n\n                           acceleration  model_year  origin  \nname                                                         \nchevrolet chevelle malibu          12.0          70     usa  \nbuick skylark 320                  11.5          70     usa  \nplymouth satellite                 11.0          70     usa  \namc rebel sst                      12.0          70     usa  \nford torino                        10.5          70     usa  \n...                                 ...         ...     ...  \nford mustang gl                    15.6          82     usa  \nvw pickup                          24.6          82  europe  \ndodge rampage                      11.6          82     usa  \nford ranger                        18.6          82     usa  \nchevy s-10                         19.4          82     usa  \n\n[398 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>chevrolet chevelle malibu</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>buick skylark 320</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>plymouth satellite</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>amc rebel sst</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>ford torino</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>ford mustang gl</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>86.0</td>\n      <td>2790</td>\n      <td>15.6</td>\n      <td>82</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>vw pickup</th>\n      <td>44.0</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>52.0</td>\n      <td>2130</td>\n      <td>24.6</td>\n      <td>82</td>\n      <td>europe</td>\n    </tr>\n    <tr>\n      <th>dodge rampage</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2295</td>\n      <td>11.6</td>\n      <td>82</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>ford ranger</th>\n      <td>28.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>79.0</td>\n      <td>2625</td>\n      <td>18.6</td>\n      <td>82</td>\n      <td>usa</td>\n    </tr>\n    <tr>\n      <th>chevy s-10</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>82.0</td>\n      <td>2720</td>\n      <td>19.4</td>\n      <td>82</td>\n      <td>usa</td>\n    </tr>\n  </tbody>\n</table>\n<p>398 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":96},{"cell_type":"code","source":"print(df.columns.values)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-04T17:24:15.414187Z","iopub.execute_input":"2025-06-04T17:24:15.414538Z"}},"outputs":[{"name":"stdout","text":"['mpg' 'cylinders' 'displacement' 'horsepower' 'weight' 'acceleration'\n 'model_year' 'origin' 'name']\n['mpg' 'cylinders' 'displacement' 'horsepower' 'weight' 'acceleration'\n 'model_year' 'origin' 'name']\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"unique_mpg = df['mpg'].unique()\nprint(list(unique_mpg))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['hp_per_weight'] = df['horsepower'] / df['weight']\ndf.set_index('hp_per_weight')\nprint(df.columns)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"car_name = df.loc[df['horsepower'].idxmax(), 'name']\nprint(car_name)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"count = df[df['mpg'] >= 35].shape[0]\nprint(count)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ndf['horsepower'] = pd.to_numeric(df['horsepower'], errors='coerce')\ndf['weight'] = pd.to_numeric(df['weight'], errors='coerce')\ndf_clean = df.dropna(subset=['horsepower', 'weight'])\nmost_common_origin = df_clean[(df_clean['horsepower'] > 100) & (df_clean['weight'] < 3000)]['origin'].mode()[0]\nprint(most_common_origin)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mean_acceleration = df[df['origin'] == 'japan']['acceleration'].mean()\nmean_acceleration_rounded = round(mean_acceleration, 2)\nprint(mean_acceleration_rounded)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"year_with_highest_avg_mpg = df.groupby('model_year')['mpg'].mean().idxmax()\nprint(year_with_highest_avg_mpg)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nmedian_mpg = df['mpg'].median()\nfiltered_df = df[df['mpg'] > median_mpg].copy()\nfiltered_df['hp_to_weight'] = filtered_df['horsepower'] / filtered_df['weight']\nmax_ratio = filtered_df['hp_to_weight'].max()\nbest_cars = filtered_df[filtered_df['hp_to_weight'] == max_ratio]\nprint(best_cars['name'].values[0])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"avg_mpg = df.groupby(['model_year', 'origin'])['mpg'].mean().reset_index()\n\nplt.figure(figsize=(10,6))\nsns.lineplot(data=avg_mpg, x='model_year', y='mpg', hue='origin', marker='o')\nplt.title('Average MPG Over Years by Origin')\nplt.xlabel('Model Year')\nplt.ylabel('Average MPG')\nplt.grid(True)\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['horsepower'] = pd.to_numeric(df['horsepower'], errors='coerce')\ndf['weight'] = pd.to_numeric(df['weight'], errors='coerce')\ndf['mpg'] = pd.to_numeric(df['mpg'], errors='coerce')\ndf['origin'] = df['origin'].astype(str)\n\ndf_clean = df.dropna(subset=['horsepower', 'weight', 'mpg', 'origin'])\n\nhue_order = ['japan', 'europe', 'usa']\n\nplt.figure(figsize=(10, 6))\nsns.scatterplot(\n    data=df_clean,\n    x='horsepower',\n    y='weight',\n    hue='origin',\n    size='mpg',\n    hue_order=hue_order,\n    palette='deep',\n    alpha=0.7,\n    sizes=(20, 200)\n)\n\nplt.title('Horsepower vs Weight of Cars by Origin and MPG')\nplt.xlabel('Horsepower')\nplt.ylabel('Weight')\nplt.legend(title='Origin', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n\n# Make sure mpg and model year are numeric\ndf['mpg'] = pd.to_numeric(df['mpg'], errors='coerce')\ndf['model year'] = pd.to_numeric(df['model_year'], errors='coerce')\ndf['name'] = df['name'].astype(str)\n\n# Drop rows with missing mpg or model year\ndf_clean = df.dropna(subset=['mpg', 'model_year', 'name'])\n\n# Group by car name and count distinct model years\ncar_years = df_clean.groupby('name')['model_year'].nunique()\n\n# Filter cars that appear in more than one year\nmulti_year_cars = car_years[car_years > 1].index\n\n# Filter main dataframe to include only those cars\nfiltered_df = df_clean[df_clean['name'].isin(multi_year_cars)]\n\n# Group and calculate std, count, and mean mpg\ngroup_stats = filtered_df.groupby('name')['mpg'].agg(['std', 'count', 'mean']).reset_index()\n\n# Filter for std < 1.0 and count >= 2\nconsistent_cars = group_stats[(group_stats['std'] < 1.0) & (group_stats['count'] >= 2)]\n\n# Rename columns for clarity\nconsistent_cars = consistent_cars.rename(columns={\n    'name': 'Model Name',\n    'count': 'Appearances',\n    'mean': 'Average mpg'\n})\n\n# Sort by appearances (descending), then average mpg (descending)\nconsistent_cars_sorted = consistent_cars.sort_values(by=['Appearances', 'Average mpg'], ascending=[False, False])\n\n# Display the result\nprint(consistent_cars_sorted[['Model Name', 'Appearances', 'Average mpg']])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}